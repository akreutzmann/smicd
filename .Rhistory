plot(density(model$conv.coef[3,]))
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000,
15000,Inf)
xclass <- cut(x,breaks=classes)
Indicator <- kde.algo(xclass = xclass, classes = classes, burnin = 40,
samples =200)
Indicator <- kde.algo(xclass = xclass, classes = classes, burnin = 40, samples =200)
plot(Indicator)
Indicator <- kde.algo(xclass = xclass, classes = classes, burnin = 40, samples =200)
plot(Indicator)
Indicator <- kde.algo(xclass = xclass, classes = classes, burnin = 4000, samples =20000)
plot(Indicator)
Indicator <- kde.algo(xclass = xclass, classes = classes, burnin = 40, samples =200)
plot(Indicator)
x <- Indicator
hist(x$xclass,breaks=x$classes, main = "Estimated Density", xlab = "x", ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2))
str(hist)
str(hist(x$xclass,breaks=x$classes, main = "Estimated Density", xlab = "x", ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2)))
maxhist <- hist(x$xclass,breaks=x$classes, main = "Estimated Density", xlab = "x", ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2))
maxhist
maxhist$density
max(maxhist$density)
maxhist <- max(hist(x$xclass,breaks=x$classes, main = "Estimated Density", xlab = "x", ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2))$density)
maxhist
hist(x$xclass,breaks=x$classes, main = "Estimated Density", xlab = "x", ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2))
str(hist)
help(hist)
lines(x$Mestimates~x$gridx,col="purple",lwd=2)
str(lines(x$Mestimates~x$gridx,col="purple",lwd=2))
x$Mestimates
max(x$Mestimates)
maxden <- max(x$Mestimates)
maxhist <- max(hist(x$xclass,breaks=x$classes, main = "Estimated Density", xlab = "x", ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2))$density)
maxden <- max(x$Mestimates)
maxhist
maxden
maxhist <- max(hist(x$xclass,breaks=x$classes, main = "Estimated Density",
xlab = "x", ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2))$density)
maxden <- max(x$Mestimates)
maxylim <- max(maxhist, maxden)
maxylim
help(lines)
hist(x$xclass,breaks=x$classes, main = "Estimated Density", xlab = "x",
ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2), ylim = maxylim)
lines(x$Mestimates~x$gridx,col="purple",lwd=2)
maxylim
hist(x$xclass,breaks=x$classes, main = "Estimated Density", xlab = "x",
ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2), ylim = c(0,maxylim))
lines(x$Mestimates~x$gridx,col="purple",lwd=2)
hist(x$xclass,breaks=x$classes, main = "Estimated Density",
xlab = "x", ylab = "f(x)",
xlim = c(x$classes[1],x$classes[length(x$classes)]/2))$density)
Model
model
x <-  model
str(density(x$pseudo.y[,ncol(x$pseudo.y)]))
maxden <- max(density(x$pseudo.y[,ncol(x$pseudo.y)])$y)
maxden
hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes, main = "Density from last iteration step", xlab = "Pseudo Y")
lines(density(x$pseudo.y[,ncol(x$pseudo.y)]),  col="purple",lwd=2)}
if (x$classes[1]==-Inf) {x$classes[1] <- min(x$pseudo.y[,ncol(x$pseudo.y)])-1}
if (x$classes[length(x$classes)]==Inf) {x$classes[length(x$classes)] <- max(x$pseudo.y[,ncol(x$pseudo.y)])+1}
hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes, main = "Density from last iteration step", xlab = "Pseudo Y")
lines(density(x$pseudo.y[,ncol(x$pseudo.y)]),  col="purple",lwd=2)}
hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes, main = "Density from last iteration step", xlab = "Pseudo Y")
model <- sem.lm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 10, samples = 40)
x <- model
if (!is.null(x$conv.sigmau)){
meanBur <- cumsum(x$conv.sigmau[1:x$burnin]) /
seq_along(x$conv.sigmau[1:x$burnin])
meanSam <- cumsum(x$conv.sigmau[(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$conv.sigmau[1:x$samples])
convergence <- c(meanBur,meanSam)
plot(convergence.sigmau, main = "Convergence", xlab = "Iteration Step", ylab = expression(sigma[u]))
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
meanBur <- cumsum(x$conv.sigmae[1:x$burnin]) /
seq_along(x$conv.sigmae[1:x$burnin])
meanSam <- cumsum(x$conv.sigmae[(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$conv.sigmae[1:x$samples])
convergence <- c(meanBur,meanSam)
plot(convergence, main = "Convergence",  xlab = "Iteration Step", ylab = expression(sigma[e]))
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
for(i in 1:(dim(x$conv.coef)[1])) {
meanBur <- cumsum(x$conv.coef[i,1:x$burnin]) /
seq_along(x$conv.coef[i,1:x$burnin])
meanSam <- cumsum(x$conv.coef[i,(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$conv.coef[i,1:x$samples])
convergence <- c(meanBur,meanSam)
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(convergence, main = "Convergence", xlab = "Iteration Step", ylab = lbs)
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
seq_along(x$conv.lambda[1:x$b.lambda])
meanSam <- cumsum(x$conv.lambda[(x$b.lambda+1):(x$m.lambda+x$b.lambda)]) /
seq_along(x$conv.lambda[1:x$m.lambda])
convergence <- c(meanBur,meanSam)
plot(convergence, main = "Convergence", xlab = "Iteration Step", ylab = expression(lambda))
abline(v=x$b.lambda)
cat("Press [enter] to continue")
line <- readline()
if (!is.null(x$conv.sigmau)){
meanBur <- cumsum(x$conv.sigmau[1:x$burnin]) /
seq_along(x$conv.sigmau[1:x$burnin])
meanSam <- cumsum(x$conv.sigmau[(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$conv.sigmau[1:x$samples])
convergence <- c(meanBur,meanSam)
plot(convergence.sigmau, main = "Convergence", xlab = "Iteration Step", ylab = expression(sigma[u]))
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
meanBur <- cumsum(x$conv.sigmae[1:x$burnin]) /
seq_along(x$conv.sigmae[1:x$burnin])
meanSam <- cumsum(x$conv.sigmae[(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$conv.sigmae[1:x$samples])
convergence <- c(meanBur,meanSam)
plot(convergence, main = "Convergence",  xlab = "Iteration Step", ylab = expression(sigma[e]))
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
meanBur <- cumsum(x$conv.coef[i,1:x$burnin]) /
seq_along(x$conv.coef[i,1:x$burnin])
meanSam <- cumsum(x$conv.coef[i,(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$conv.coef[i,1:x$samples])
convergence <- c(meanBur,meanSam)
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(convergence, main = "Convergence", xlab = "Iteration Step", ylab = lbs)
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
if (!is.null(x$conv.lambda)){
meanBur <- cumsum(x$conv.lambda[1:x$b.lambda]) /
seq_along(x$conv.lambda[1:x$b.lambda])
meanSam <- cumsum(x$conv.lambda[(x$b.lambda+1):(x$m.lambda+x$b.lambda)]) /
seq_along(x$conv.lambda[1:x$m.lambda])
convergence <- c(meanBur,meanSam)
plot(convergence, main = "Convergence", xlab = "Iteration Step", ylab = expression(lambda))
abline(v=x$b.lambda)
cat("Press [enter] to continue")
line <- readline()
}
if (x$classes[1]==-Inf) {x$classes[1] <- min(x$pseudo.y[,ncol(x$pseudo.y)])-1}
if (x$classes[length(x$classes)]==Inf) {x$classes[length(x$classes)] <- max(x$pseudo.y[,ncol(x$pseudo.y)])+1}
hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes, main = "Density from last iteration step", xlab = "Pseudo Y")
lines(density(x$pseudo.y[,ncol(x$pseudo.y)]),  col="purple",lwd=2)}
x$classes
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
model <- sem.lm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 10, samples = 40)
x <- model
if (!is.null(x$conv.sigmau)){
meanBur <- cumsum(x$conv.sigmau[1:x$burnin]) /
seq_along(x$conv.sigmau[1:x$burnin])
meanSam <- cumsum(x$conv.sigmau[(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$conv.sigmau[1:x$samples])
convergence <- c(meanBur,meanSam)
plot(convergence.sigmau, main = "Convergence", xlab = "Iteration Step", ylab = expression(sigma[u]))
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
meanBur <- cumsum(x$conv.sigmae[1:x$burnin]) /
seq_along(x$conv.sigmae[1:x$burnin])
meanSam <- cumsum(x$conv.sigmae[(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$conv.sigmae[1:x$samples])
convergence <- c(meanBur,meanSam)
plot(convergence, main = "Convergence",  xlab = "Iteration Step", ylab = expression(sigma[e]))
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
meanBur <- cumsum(x$conv.coef[i,1:x$burnin]) /
seq_along(x$conv.coef[i,1:x$burnin])
meanSam <- cumsum(x$conv.coef[i,(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$conv.coef[i,1:x$samples])
convergence <- c(meanBur,meanSam)
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(convergence, main = "Convergence", xlab = "Iteration Step", ylab = lbs)
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
if (!is.null(x$conv.lambda)){
meanBur <- cumsum(x$conv.lambda[1:x$b.lambda]) /
seq_along(x$conv.lambda[1:x$b.lambda])
meanSam <- cumsum(x$conv.lambda[(x$b.lambda+1):(x$m.lambda+x$b.lambda)]) /
seq_along(x$conv.lambda[1:x$m.lambda])
convergence <- c(meanBur,meanSam)
plot(convergence, main = "Convergence", xlab = "Iteration Step", ylab = expression(lambda))
abline(v=x$b.lambda)
cat("Press [enter] to continue")
line <- readline()
}
if (x$classes[1]==-Inf) {x$classes[1] <- min(x$pseudo.y[,ncol(x$pseudo.y)])-1}
if (x$classes[length(x$classes)]==Inf) {x$classes[length(x$classes)] <- max(x$pseudo.y[,ncol(x$pseudo.y)])+1}
hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes, main = "Density from last iteration step", xlab = "Pseudo Y")
lines(density(x$pseudo.y[,ncol(x$pseudo.y)]),  col="purple",lwd=2)}
lines(density(x$pseudo.y[,ncol(x$pseudo.y)]),  col="purple",lwd=2)})
lines(density(x$pseudo.y[,ncol(x$pseudo.y)]),  col="purple",lwd=2)
maxhist <- max(hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes,
main = "Density from last iteration step", xlab = "Pseudo Y"))
x$classes
hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes, main = "Density from last iteration step", xlab = "Pseudo Y")
hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes,
main = "Density from last iteration step", xlab = "Pseudo Y")
maxhist <- max(hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes,
main = "Density from last iteration step", xlab = "Pseudo Y"))
maxhist <- max(hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes,
main = "Density from last iteration step", xlab = "Pseudo Y")$density)
maxhist
maxden <- max(density(x$pseudo.y[,ncol(x$pseudo.y)])$y)
maxden
maxylim <- max(maxhist, maxden)
hist(x$pseudo.y[,ncol(x$pseudo.y)], breaks = x$classes, main = "Density from last iteration step",
xlab = "Pseudo Y", ylim = c(0,maxylim))
lines(density(x$pseudo.y[,ncol(x$pseudo.y)]),  col="purple",lwd=2)}
lines(density(x$pseudo.y[,ncol(x$pseudo.y)]),  col="purple",lwd=2)
maxhist <- max(hist(pseudo.y, breaks = classes, main = "Density from last iteration step",
xlab = "Pseudo Y on original scale")$density)
pseudo.y <- exp(x$pseudo.y[,ncol(x$pseudo.y)])
if (x$classes[1]==-Inf) {x$classes[1] <- min(pseudo.y)-1}
if (x$classes[length(x$classes)]==Inf) {x$classes[length(x$classes)] <- max(pseudo.y)+1}
classes <- x$classes
maxhist <- max(hist(pseudo.y, breaks = classes, main = "Density from last iteration step",
xlab = "Pseudo Y on original scale")$density)
hist(pseudo.y, breaks = classes, main = "Density from last iteration step",
xlab = "Pseudo Y on original scale")
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
model <- sem.lm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 10, samples = 40)
plot(sample())
plot(model)
model <- sem.lm(formula = examsc.class ~ standLRT + schavg, data = data, classes = classes, burnin = 10, samples = 40, trafo = "log")
plot(model)
model <- sem.lm(formula = examsc.class ~ standLRT + schavg, data = data, classes = classes, burnin = 10, samples = 40, trafo = "bc")
plot(model)
x <- model
(x$transformation == "bc")
pseudo.y <- boxcox.lme.est(dat=x$pseudo.y[,ncol(x$pseudo.y)],
lambda = x$lambda, inverse = T)[[1]]
# Internal documentation -------------------------------------------------------
#
# Box-Cox transformation for mixed linear regression
boxcox.lme.est <- function(dat, lambda=NULL, m=NULL, inverse, formula){
lambda_new <- NULL
geometric.mean<-function (x) #for RMLE in the parameter estimation
{
exp(mean(log(x)))
}
#Transformation Box-Cox
Box = function(l, y, inv=FALSE, m=NULL) #Box-Cox transformation (lambda=l)
{
if(!inv)
{
if(is.null(m))
{
m = 0
}
if((s=min(y))<=0) #with shift(=m) parameter for making data positive (>0)
{
s = abs(s)+1
}
else
{
s=0
}
m=m+s
if(abs(l)<=1e-12) #case lambda=0
{
y = log(y+m)
}
else
{
y = ((y+m)^l-1)/l
}
}
else
{
if(is.null(m)) #inverse transformation
{
m = 0
}
if(abs(l)<=1e-12) #case lambda=0
{
y = exp(y) - m
}
else
{
y = (l*y+1)^(1/l)-m
}
}
return(list(y = y, m = m)) #return of transformed data and shift (overwriten y)
}
sd_box = function(y, l, m)
{
if((m=min(y))<=0)
{
y=y-m
y=y+1
}
gm=geometric.mean(y)
if(abs(l)>1e-12)
{
y=(y^l-1)/(l*((gm)^(l-1)))
}
else
{
y=gm*log(y)
}
return(y)
}
# Estimation REML
opt_reml_box <- function(l,y,dat,m)
{
dat$pseudoy = sd_box(y=y, l = l, m=m)
mod <- lmer(formula, REML=TRUE,data = dat)
if(logLik(mod)>0)
{
return(99999)
}
return(-logLik(mod))
}
if (is.data.frame(dat)==TRUE) {
if (inverse==FALSE){
l_box <- optimise(f = opt_reml_box, interval = c(-1,2),
y= dat$pseudoy,dat = dat, m = NULL)$minimum
trans_dat <- Box(l_box, y = dat$pseudoy, inv=FALSE)$y
m <- Box(l_box, y = dat$pseudoy, inv=FALSE)$m
lambda_new <- l_box
}
if (inverse==TRUE){
trans_dat <- Box(lambda, y=dat$pseudoy , inv = TRUE, m=m)$y
}
}
if (is.data.frame(dat)==FALSE) {
if (inverse==FALSE){
trans_dat <- Box(lambda, y = dat, inv=FALSE)$y
m <- Box(lambda, y = dat, inv=FALSE)$m
}
if (inverse==TRUE){
trans_dat <- Box(lambda, y=dat , inv = TRUE, m=m)$y
}
}
res <- list(trans_dat, m, lambda_new)
return(res)
}
pseudo.y <- boxcox.lme.est(dat=x$pseudo.y[,ncol(x$pseudo.y)],
lambda = x$lambda, inverse = T)[[1]]
if (x$classes[1]==-Inf) {x$classes[1] <- min(pseudo.y)-1}
if (x$classes[length(x$classes)]==Inf) {x$classes[length(x$classes)] <- max(pseudo.y)+1}
classes <- x$classes
maxhist <- max(hist(pseudo.y, breaks = classes, main = "Density from last iteration step",
xlab = "Pseudo Y on original scale")$density)
maxhist
maxden <- max(density(pseudo.y)$y)
maxden
maxylim <- max(maxhist, maxden)
maxylim
hist(pseudo.y, breaks = classes, main = "Density from last iteration step",
xlab = "Pseudo Y on original scale", ylim = c(0,maxlim))
hist(pseudo.y, breaks = classes, main = "Density from last iteration step",
xlab = "Pseudo Y on original scale", ylim = c(0,maxlyim))
maxylim <- max(maxhist, maxden)
hist(pseudo.y, breaks = classes, main = "Density from last iteration step",
xlab = "Pseudo Y on original scale", ylim = c(0,maxlyim))
maxlim <- max(maxhist, maxden)
maxylim <- max(maxhist, maxden)
hist(pseudo.y, breaks = classes, main = "Density from last iteration step",
xlab = "Pseudo Y on original scale", ylim = c(0,maxylim))
lines(density(pseudo.y),  col="purple",lwd=2)}
lines(density(pseudo.y),  col="purple",lwd=2)
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
model <- sem.lm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 10, samples = 40)
model
plot(model)
model <- sem.lm(formula = examsc.class ~ standLRT + schavg, data = data,classes = classes, burnin = 10, samples = 40, trafo = "log")
plot(model)
model <- sem.lm(formula = examsc.class ~ standLRT + schavg, data = data,classes = classes, burnin = 10, samples = 40, trafo = "bc")
plot(model)
library(emdi)
install.packages("emdi")
library(emdi)
help(emdi)
Indicator_custom <- kde.algo(xclass = xclass, classes = classes, burnin = 40,
samples =200, custom_indicator = list(quantile5 = function(y, threshold)
{quantile(y, probs = 0.05)})
)
Indicator <- kde.algo(xclass = xclass, classes = classes, burnin = 40,
samples =200)
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000,
15000,Inf)
xclass <- cut(x,breaks=classes)
Indicator <- kde.algo(xclass = xclass, classes = classes, burnin = 40,
samples =200)
Indicator_custom <- kde.algo(xclass = xclass, classes = classes, burnin = 40,
samples =200, custom_indicator = list(quantile5 = function(y, threshold)
{quantile(y, probs = 0.05)}))
plot(Indicator_custom)
Indicator_custom
help(ICD)
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000,
6000,8000,10000,15000,Inf)
xclass <- cut(x,breaks=classes)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 40,
samples =200)
print(Indicator)
Indicator
plot(Indicator)
summary(Indicator)
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 4, samples = 10)
plot(model)
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 10, samples = 40)
summary(model)
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data, classes = classes, burnin = 10, samples = 40, bootstrap.se = TRUE, b =2)
summary(model)
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
model1 <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes, burnin = 4, samples = 10)
summary(model1)
model2 <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes, burnin = 4, samples = 10)
summary(model2)
model2 <- semLme(formula = examsc.class ~ standLRT + schavg + (standLRT|school), data = data, classes = classes, burnin = 4, samples = 10, bootstrap.se = TRUE, b = 2)
summary(model2)
plot(model2)
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000,
6000,8000,10000,15000,Inf)
xclass <- cut(x,breaks=classes)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 40,
samples =200)
plot(Indicator)
x <- Indicator
indicator = NULL
indicator
is.null(indicator)
rownames(x$Point_estimate)
rownames(x$Point_estimate.run)
indicator = c("mean", "quant90")
(!is.null(indicator))
length(indicator)
x$Point_estimate
i<-1
indicator[i]
x$Point_estimate.run[indicator[i],1:x$burnin]
i<-2
indicator
x$Point_estimate.run[indicator[i],1:x$burnin]
x$Point_estimate.run
x$Point_estimate
x$Point_estimate.run[indicator[i],1:x$burnin]
indicator
name <- indicator
for (i in 1:length(indicator)) {
meanBur <- cumsum(x$Point_estimate.run[indicator[i],1:x$burnin]) /
seq_along(x$Point_estimate.run[indicator[i],1:x$burnin])
meanSam <- cumsum(x$Point_estimate.run[indicator[i],(x$burnin+1):(x$samples+x$burnin)]) /
seq_along(x$Point_estimate.run[indicator[i],1:x$samples])
convergence <- c(meanBur,meanSam)
name <- indicator
plot(convergence, xlab = "Iteration step", ylab = name[i],
main = "Convergence")
abline(v = x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000,
6000,8000,10000,15000,Inf)
xclass <- cut(x,breaks=classes)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 40,
samples =200)
plot(Indicator)
plot(Indicator, indicator = c("mean", "gini"))
plot(Indicator)
help(plot)
help("plot.kdeAlgo")
