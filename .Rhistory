abline(h=x$Point_estimate[indicator[i]])
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
indicator <- quant90
indicator <- "quant90"
for (i in 1:length(indicator)) {
name <- indicator
par(mfrow=c(2,1))
plot(x$Point_estimate.run[indicator[i],], xlab = "Iteration step",
ylab = "Point estimate for each iteration",
main = paste0("Convergence ", name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[indicator[i],][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$Point_estimate[indicator[i]])
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
library(smicd)
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000, 15000,Inf)
xclass <- cut(x,breaks=classes)
weights <- abs(rnorm(500,0,1))
oecd <- rep(seq(1,6.9,0.3),25)
Indicator <- kdeAlgo(xclass = xclass, classes = ("classes"))
Indicator <- kdeAlgo(xclass = xclass, classes = classes)
plot(Indicator)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 300, samples = 1000)
plot(Indicator)
dev.off
dev.off()
library(smicd)
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000, 15000,Inf)
xclass <- cut(x,breaks=classes)
weights <- abs(rnorm(500,0,1))
oecd <- rep(seq(1,6.9,0.3),25)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 30, samples = 10)
plot(Indicator)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 400, samples = 2000)
plot(Indicator)
library(smicd)
help(sem)
help("semLm")
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
# Run model with default settings
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes)
summary(model)
plot(model)
x <- model
!is.null(x$conv.sigmau)
is.null(x$conv.sigmau)
plot(x$conv.sigmae, main = "Convergence",  xlab = "Iteration Step", ylab = expression(sigma[e]))
plot(x$conv.sigmae, main = "Convergence",  xlab = "Iteration Step", ylab = expression(sigma[e]))
x$samples
for (j in 1:x$samples){
means <- c(means, mean(x$conv.sigmae[i,][x$burnin:j]))
}
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.sigmae[i,][x$burnin:j]))
}
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.sigmae[x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$Point_estimate[i])
abline(h=x$sigmae)
abline(v=x$burnin)
double.xmin
double.xmin
.Machine$double.xmin
plot(x$conv.sigmae, main = "Convergence",  xlab = "Iteration Step", ylab = expression(sigma[e]))
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.sigmae[x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$sigmae)
abline(v=x$burnin)
par(mfrow=c(2,1))
plot(x$conv.sigmae, main = "Convergence",  xlab = "Iteration Step", ylab = expression(sigma[e]))
abline(v=x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.sigmae[x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$sigmae)
abline(v=x$burnin)
plot(x$conv.sigmae, main = paste0("Convergence", expression(sigma[e])),  xlab = "Iteration Step", ylab = expression(sigma[e]))
plot(x$conv.sigmae, main = paste0("Convergence", expression(sigma[e])),
xlab = "Iteration Step", ylab = expression(sigma[e]))
expression(sigma[e])
?expression
plot(x$conv.sigmae, main = paste0("Convergence", expression(sigma[e])),
xlab = "Iteration Step", ylab = expression("bla",sigma[e]))
plot(x$conv.sigmae, main = paste0("Convergence", expression(sigma[e])),
xlab = "Iteration Step", ylab = expression(sigma[e]))
plot(x$conv.sigmae, main = paste0("Convergence", expression(paste0("bla",sigma[e]))),
xlab = "Iteration Step", ylab = expression(sigma[e]))
plot(x$conv.sigmae, main =  expression(paste0("bla",sigma[e])),
xlab = "Iteration Step", ylab = expression(sigma[e]))
plot(x$conv.sigmae, main =  expression(paste("bla",sigma[e])),
xlab = "Iteration Step", ylab = expression(sigma[e]))
plot(x$conv.sigmae, main =  expression(paste0("bla",sigma[e])),
xlab = "Iteration Step", ylab = expression(sigma[e]))
plot(x$conv.sigmae, main =  expression(paste("Convergence ",sigma[e])),
xlab = "Iteration Step", ylab = expression(sigma[e]))
dev.off()
par(mfrow=c(2,1))
plot(x$conv.sigmae, main =  expression(paste("Convergence ",sigma[e])),
xlab = "Iteration Step", ylab = "Point estimate for each iteration")
abline(v=x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.sigmae[x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$sigmae)
abline(v=x$burnin)
(dim(x$conv.coef)[1])
lbs <- parse(text=(paste0("beta[",i-1,"]")))
i = 1
lbs <- parse(text=(paste0("beta[",i-1,"]")))
lbs
plot(x$conv.coef[i,], main = "Convergence", xlab = "Iteration Step", ylab = lbs)
abline(v=x$burnin)
x$conv.coef
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.coef[i,][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(x$conv.coef[i,], main = "Convergence", xlab = "Iteration Step", ylab = lbs)
abline(v=x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.coef[i,][x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
x$coef
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.coef[i,][x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$coef[i])
abline(v=x$burnin)
dev.off()
par(mfrow=c(2,1))
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(x$conv.coef[i,], main = "Convergence", xlab = "Iteration Step", ylab = lbs)
abline(v=x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.coef[i,][x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$coef[i])
abline(v=x$burnin)
for(i in 1:(dim(x$conv.coef)[1])) {
par(mfrow=c(2,1))
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(x$conv.coef[i,], main = "Convergence", xlab = "Iteration Step", ylab = lbs)
abline(v=x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.coef[i,][x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$coef[i])
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
library(smicd)
help("semLme")
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
model1 <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes)
summary(model1)
x <- model1
x
!is.null(x$conv.sigmau)
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
model1 <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes)
summary(model1)
x <- model1
x
x$VaCov
x$conv.VaCov
help("semLme")
model2 <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes)
summary(model2)
plot(model2)
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
# Run model with default settings
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, trafo = "bc", adjust = 1)
summary(model)
plot(model)
x <- model
i <- 1
par(mfrow=c(2,1))
lbs <- parse(text=(paste0("beta[",i-1,"]")))
lbs
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(x$conv.coef[i,], main = "Convergence", xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("Convergence", "beta[",i-1,"]")))
plot(x$conv.coef[i,], main = "Convergence", xlab = "Iteration Step", ylab = lbs)
dev.off()
lbs <- parse(text=(paste0("Convergence beta[",i-1,"]")))
plot(x$conv.coef[i,], main = expression(paste("Convergence ",sigma[e])),
xlab = "Iteration Step", ylab = lbs)
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[1])),
xlab = "Iteration Step", ylab = lbs)
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("Convergence beta[",i-1,"]")))
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- paste("bla", parse(text=(paste0("beta[",i-1,"]"))))
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("bla", "beta[",i-1,"]")))
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("bla ", "beta[",i-1,"]")))
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
plot(x$conv.coef[i,], main = expression(paste("Convergence ",beta[i-1])),
xlab = "Iteration Step", ylab = paste("bla",lbs))
plot(x$conv.coef[i,], main = expression(paste(beta[i-1])),
xlab = "Iteration Step", ylab = paste("bla",lbs))
plot(x$conv.coef[i,], main = expression(paste(beta[i-1])),
xlab = "Iteration Step", ylab = paste(lbs))
plot(x$conv.coef[i,], main = expression(paste(beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("beta[",i-1,"] Cv")))
plot(x$conv.coef[i,], main = expression(paste(beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("beta[",i-1,"] Cv")))
lbs <- parse(text=(paste0("beta[",i-1,"]")))
lbs <- parse(text=(paste0("beta[",i-1,"]", "ba")))
plot(x$conv.coef[i,], main = expression(paste(beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
lbs <- parse(text=(paste0("beta[",i-1,"]", "ba")))
lbs <- parse(text=(paste0("beta[",i-1,"]", 1)))
lbs <- parse(text=(paste0("beta[",i-1,"]")))
lbs <- parse(text=(paste0("beta[",i-1,"]")))
lbs <- parse(text=(paste0("beta[",i-1,"]")))
plot(x$conv.coef[i,], main = expression(paste(beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
?parse
plot(x$conv.coef[i,], main = expression(paste("Convergence" beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
plot(x$conv.coef[i,], main = expression(paste("Convergence" ,beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
plot(x$conv.coef[i,], main = expression(paste("Convergence " ,beta[i-1])),
xlab = "Iteration Step", ylab = lbs)
?bquote
plot(x$conv.coef[i,], main = expression(paste("Convergence " ,beta[i-1])),
xlab = bquote("bla" ~ beta[.(i)-1]), ylab = lbs)
indx = i-1
plot(x$conv.coef[i,], main = expression(paste("Convergence " ,beta[i-1])),
xlab = bquote("bla" ~ beta[.(indx)]), ylab = lbs)
plot(x$conv.coef[i,], main = bquote("Convergence" ~ beta[.(indx)]),
xlab = bquote("bla" ~ beta[.(indx)]), ylab = lbs)
for(i in 1:(dim(x$conv.coef)[1])) {
par(mfrow=c(2,1))
lbs <- parse(text=(paste0("beta[",i-1,"]")))
indx = i-1
plot(x$conv.coef[i,], main = bquote("Convergence" ~ beta[.(indx)]),
xlab = "Iteration step",
ylab = "Point estimate for each iteration")
abline(v=x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.coef[i,][x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$coef[i])
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
x$coef[i]
!is.null(x$conv.lambda)
par(mfrow=c(2,1))
plot(x$conv.lambda, main = "Convergence", xlab = "Iteration Step",
ylab = expression(lambda))
abline(v=x$b.lambda)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.lambda[x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$sigmae)
abline(v=x$burnin)
par(mfrow=c(2,1))
plot(x$conv.lambda, main = "Convergence", xlab = "Iteration Step",
ylab = expression(lambda))
abline(v=x$b.lambda)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.lambda[x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$lambda)
abline(v=x$burnin)
plot(x$conv.lambda, main =  expression(paste("Convergence ",lambda)),
xlab = "Iteration Step",
ylab = expression(lambda))
if (!is.null(x$conv.lambda)){
par(mfrow=c(2,1))
plot(x$conv.lambda, main =  expression(paste("Convergence ",lambda)),
xlab = "Iteration Step",
ylab = "Point estimate for each iteration")
abline(v=x$b.lambda)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$conv.lambda[x$burnin:j]))
}
point = c(rep(means[1]-.Machine$double.xmin, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-.Machine$double.xmin,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$lambda)
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
?par
library(smicd)
?Sys.setenv
Sys.setenv
Sys.setenv()
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.52\\bin\\gswin62c.exe")
Sys.getenv("R_GSCMD")
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.19\\bin\\gswin64c.exe")
Sys.getenv("R_GSCMD")
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.52\\bin\\gswin64c.exe")
version
library(smicd)
library(smicd)
help("kdeAlgo")
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000, 15000,Inf)
xclass <- cut(x,breaks=classes)
weights <- abs(rnorm(500,0,1))
oecd <- rep(seq(1,6.9,0.3),25)
Indicator <- kdeAlgo(xclass = xclass, classes = classes)
plot(Indicator)
Indicator_custom <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}))
plot(Indicator_custom)
Indicator_weights <- kdeAlgo(xclass = xclass, classes = classes,
weights = weights, oecd = oecd)
plot(Indicator_custom)
## End(Not run)
help("semLm")
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
# Run model with default settings
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes)
summary(model)
plot(model)
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, trafo = "bc")
summary(model)
plot(model)
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, trafo = "bc", burnin = 10, samples = 10)
summary(model)
plot(model)
help("semLme")
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
# Run model with random intercept and default settings
model1 <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes)
summary(model1)
print(model1)
plot(model1)
model1 <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes, burnin = 10, samples = 10,
trafo = "bc")
summary(model1)
plot(model1)
model2 <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes)
summary(model2)
plot(model2)
model2 <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes, burnin = 10, samples = 10,
trafo = "bc")
summary(model2)
plot(model2)
devtools::release()
285/100*9*1.07
285/100*9*1.09
toBibtex(citation("actuar",auto=TRUE))
?citation()
installed.packages("actuar")
install.packages("actuar")
library("actuar")
toBibtex(citation("actuar",auto=TRUE))
toBibtex(citation("actuar"))
toBibtex(citation("fitdistrplus",auto=TRUE))
install.packages("fitdistrplus")
toBibtex(citation("fitdistrplus",auto=TRUE))
toBibtex(citation("fitdistrplus"))
toBibtex(citation("smicd",auto=TRUE))
toBibtex(citation("stats",auto=TRUE))
toBibtex(citation("stats"))
toBibtex(citation("MASS",auto=TRUE))
toBibtex(citation("MASS"))
toBibtex(citation("IntReg",auto=TRUE))
install.packages("IntReg")
library(IntReg)
install.packages("IntReg")
install.packages("survival")
library(survival)
ltoBibtex(citation("survival",auto=TRUE))
toBibtex(citation("survival",auto=TRUE))
toBibtex(citation("survival"))
install.packages("lme4")
toBibtex(citation("lme4",auto=TRUE))
toBibtex(citation("lme4"))
install.packages("nlme")
toBibtex(citation("nlme",auto=TRUE))
toBibtex(citation("nlme"))
install.packages("ordinal")
toBibtex(citation("ordinal",auto=TRUE))
toBibtex(citation("ordinal"))
