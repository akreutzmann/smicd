classes <- BoxCoxClasses[[1]]
}
data <- midpoints.est(formula = formula, data = data, classes = classes)
formula <- as.formula(gsub(".*~","pseudoy~",formula))
regclass <- lmer(formula,data=data)
library(lmer)
library(lme4)
regclass <- lmer(formula,data=data)
resulty <- matrix(ncol = c(burnin + samples), nrow = nrow(data))
resultcoef <- matrix(ncol = c(burnin + samples), nrow = length(regclass@beta))
result_ranef <- vector("list", burnin + samples)
result_sigmae<-vector(mode = "numeric", length = burnin+samples)
result_r2c<-vector(mode = "numeric", length = burnin+samples)
result_r2m<-vector(mode = "numeric", length = burnin+samples)
result_icc <- vector(mode = "numeric", length = burnin+samples)
VaCovMa <- vector("list", burnin+samples)
j<-1
data$predict <- predict(regclass,data)
sigmahat <- sigma(regclass)
for (i in 1:(length(classes) - 1)) {
if (nrow(data[data$yclassl==i,])!=0) {
mean <- data$predict[data$yclassl==i]
pseudoy <- rtruncnorm(length(mean), a=classes[i], b=classes[i+1], mean=mean, sd=sigmahat )
data$pseudoy[data$yclassl==i] <- pseudoy
}
}
library(truncnorm)
for (i in 1:(length(classes) - 1)) {
if (nrow(data[data$yclassl==i,])!=0) {
mean <- data$predict[data$yclassl==i]
pseudoy <- rtruncnorm(length(mean), a=classes[i], b=classes[i+1], mean=mean, sd=sigmahat )
data$pseudoy[data$yclassl==i] <- pseudoy
}
}
regclass=lmer(formula,data=data )
resultcoef[,j] <- regclass@beta
result_ranef[[j]] <- as.matrix(ranef(regclass)[[1]])
result_sigmae[j]<- sigmahat
r_squared <- r.squaredGLMM(regclass)
library(MuMin)
library(MuMIn)
r_squared <- r.squaredGLMM(regclass)
r_squared
is.matrix(r_squared)
unname(r_squared["delta", 1])
unname(r_squared[1, 1])
unname(r_squared[1, 2])
library(smicd)
## Not run:
# Load and prepare data
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
# Run model with random intercept and default settings
model1 <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes)
summary(model1)
# Run model with random intercept + random slope with default settings
model2 <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes, burnin = 5,
samples = 20, trafo = "log")
summary(model2)
library(smicd)
help("semLm")
help(Exam)
library(smicd)
help("smicd")
Nora <- 66
Paul <- 66
AK <- 20
Soeren <- 33
Nora+Paul+AK+Soeren
N <- 25
P <- 66
F <- 66
S <- 15
AK <- 75
N+P+F+S+AK
N <- 25
P <- 66
F <- 66
S <- 15
N+P+F+S
devtools::release()
install.packages("R.rsp")
library(smicd)
library(smicd)
install.packages("qpdf")
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
.libPaths()
Sys.getenv("PATH")
devtools:build_vignettes()
devtools::build_vignettes()
library(smicd)
devtools::release()
devtools::release()
devtools::release()
installed.packages("smicd")
install.packages("smicd")
help(smicd)
library("smicd")
# Check help
help("smicd")
# Generate data
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000, 15000,Inf)
xclass <- cut(x,breaks=classes)
weights <- abs(rnorm(500,0,1))
oecd <- rep(seq(1,6.9,0.3),25)
# Estimate statistical indicators with default settings
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4)
print(Indicator)
plot(Indicator)
print(Indicator)
help("kdeAlgo")
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000, 15000,Inf)
xclass <- cut(x,breaks=classes)
weights <- abs(rnorm(500,0,1))
oecd <- rep(seq(1,6.9,0.3),25)
# Estimate statistical indicators with default settings
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4)
print(Indicator)
plot(Indicator)
# Indclude survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
weights = weights)
# Include custom indicators with oecd and survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd, weights = weights, bootstrap.se = TRUE, b = 5)
# Include custom indicators with oecd and survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd, weights = weights, bootstrap.se = TRUE, b = 5)
# Include custom indicators with oecd and survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd, weights = weights, bootstrap.se = TRUE, b = 5)
Indicator
print(Indicator)
plot(Indicator)
# Estimate statistical indicators with default settings
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Indclude survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
weights = weights)
Indicator
print(Indicator)
plot(Indicator)
# Estimate statistical indicators with default settings
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Indclude survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
weights = weights, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Indclude oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
oecd = oecd, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Indclude survey and oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
weights = weights, oecd = oecd, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators with survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, weights = weights, burnin = 2, samples = 4)
# Include custom indicators with survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, weights = weights)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators with oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd, burnin = 2, samples = 4)
# Include custom indicators with oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd)
# Include custom indicators with oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd)
# Include custom indicators with oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators with oecd and survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd, weights = weights)
Indicator
print(Indicator)
plot(Indicator)
# Estimate statistical indicators with default settings
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 2, samples = 4, bootstrap.se = TRUE, b = 5, burnin = 2, samples = 4)
# Estimate statistical indicators with default settings
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 2, samples = 4, bootstrap.se = TRUE, b = 5)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, bootstrap.se = TRUE, b = 5)
Indicator
print(Indicator)
plot(Indicator)
# Indclude survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
weights = weights, bootstrap.se = TRUE, b = 5, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Indclude oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
oecd = oecd, bootstrap.se = TRUE, b = 5, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Indclude survey and oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
weights = weights, oecd = oecd, bootstrap.se = TRUE, b = 5, burnin = 2, samples = 4)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators with survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, weights = weights, bootstrap.se = TRUE, b = 5, burnin = 2, samples = 4)
# Include custom indicators with survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, weights = weights, bootstrap.se = TRUE, b = 5)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators with oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd, bootstrap.se = TRUE, b = 5)
# Include custom indicators with oecd weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd, bootstrap.se = TRUE, b = 5)
Indicator
print(Indicator)
plot(Indicator)
# Include custom indicators with oecd and survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd, weights = weights, bootstrap.se = TRUE, b = 5, burnin = 2, samples = 4)
# Include custom indicators with oecd and survey weights
Indicator <- kdeAlgo(xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold, weights)
{quantile(y, probs = 0.05)}), burnin = 2, samples = 4, oecd = oecd, weights = weights, bootstrap.se = TRUE, b = 5)
Indicator
print(Indicator)
plot(Indicator)
help("semLm")
# Load and prepare data
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with default settings
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 4, samples = 8)
summary(model)
# Run model with default settings
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with log transformation
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 4, samples = 8, trafo = "log")
summary(model)
print(model)
plot(model)
# Run model with bc transformation
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 4, samples = 8, trafo = "bc", adjust = 1)
summary(model)
print(model)
plot(model)
# Run model with default settings
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 4, samples = 8, bootstrap.se = TRUE, b=3)
summary(model)
print(model)
plot(model)
# Run model with log transformation
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 4, samples = 8, trafo = "log", bootstrap.se = TRUE, b=3)
summary(model)
print(model)
plot(model)
# Run model with bc transformation
model <- semLm(formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 4, samples = 8, trafo = "bc", adjust = 1, bootstrap.se = TRUE, b=3)
summary(model)
print(model)
plot(model)
help("semLME")
help("semLme")
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
# Run model with random intercept and default settings
model1 <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes)
summary(model1)
help("semLme")
data <- Exam
classes <- c(1,1.5,2.5,3.5,4.5,5.5,6.5,7.7,8.5, Inf)
data$examsc.class<- cut(data$examsc, classes)
# Run model with random intercept and default settings
model <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept and log trafo
model <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes, trafo = "log", burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept and bc trafo
model <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes, trafo = "bc", burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept + random slope with default settings
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept + random slope with log
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes, trafo = "log", burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept + random slope with bc
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes, trafo = "bc", burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept and default settings
model <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes, bootstrap.se = TRUE, b=3, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept and log trafo
model <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes, trafo = "log", bootstrap.se = TRUE, b=3, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept and bc trafo
model <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes, trafo = "bc", bootstrap.se = TRUE, b=3, burnin = 4, samples = 8)
summary(model)
# Run model with random intercept and bc trafo
model <- semLme(formula = examsc.class ~ standLRT + schavg + (1|school),
data = data, classes = classes, trafo = "bc", bootstrap.se = TRUE, b=20, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept + random slope with default settings
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes, bootstrap.se = TRUE, b=10, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept + random slope with log
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes, trafo = "log", bootstrap.se = TRUE, b=10, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
# Run model with random intercept + random slope with bc
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT|school), data = data, classes = classes, trafo = "bc", bootstrap.se = TRUE, b=10, burnin = 4, samples = 8)
summary(model)
print(model)
plot(model)
library(GB2)
x <- seq(0,10000000,1)
y <- dgb2(x, shape1=2.5,
scale=1700,
shape2=18,
shape3 = 1.46)
library(GB2)
x <- seq(0,50000,1)
y <- dgb2(x, shape1=2.5,
scale=1700,
shape2=18,
shape3 = 1.46)
plot(x,y)
dev.off()
library(GB2)
x <- seq(0,50000,1)
y <- dgb2(x, shape1=2.5,
scale=1700,
shape2=18,
shape3 = 1.46)
plot(x,y, type = "l")
df <- data.frame(x,y)
ggplot(data=df, aes(x=x, y=y)) +
geom_line()+
ggplot(data=df, aes(x=x, y=y)) +
geom_line()
library(ggplot2)
ggplot(data=df, aes(x=x, y=y)) +
geom_line()
Test1 <-read_sav("C:/Users/paulwalter/Desktop/G_Basistest_Dez_2013_Rasch_TTG_TestheftB.sav")
##### Daten einlesen
library(haven)
Test1 <-read_sav("C:/Users/paulwalter/Desktop/G_Basistest_Dez_2013_Rasch_TTG_TestheftB.sav")
library("eRm")
Test1.mat <- as.matrix(Test1[,18:49], dimnames=names(Test1) [18:49])
Rasch1 <- RM(Test1.mat)
summary(Rasch1)
Rasch.par <- person.parameter(Rasch1)
print(Rasch.par)
summary(Rasch.par)
Anderson <- LRtest(Rasch1, splitcr = "median")
summary(Anderson)
plotPImap(Rasch1)
plotICC(Rasch1)
plotGOF(Anderson)
Waldtest(Rasch1, splitcr = "median")
MLoef(Rasch1, splitcr = "median")
help("LRtest")
warnings()
summary(Rasch1)
##### Daten einlesen
library(haven)
Test1 <-read_sav("C:/Users/paulwalter/Desktop/G_Basistest_Dez_2013_Rasch_TTG_TestheftB.sav")
library("eRm")
Test1.mat <- as.matrix(Test1[,18:49], dimnames=names(Test1) [18:49])
View(Test1.mat)
Test1.mat$TTG_12
Test1.mat[,"TTG_12"]
Test1.mat[,"TTG_15"]
Rasch1 <- RM(Test1.mat)
summary(Rasch1)
Rasch.par <- person.parameter(Rasch1)
print(Rasch.par)
summary(Rasch.par)
Anderson <- LRtest(Rasch1, splitcr = "median")
plotPImap(Rasch1)
plotICC(Rasch1)
