plot(LME)
install.packages("mlmRev")
library(mlmRev)
toBibtex(citation("mlmRev",auto=TRUE));
toBibtex(citation("mlmRev"));
library(smicd)
library(smicd)
set.seed(123)
data(eusilc)
eusilc <- eusilc[eusilc$eqIncome > 0, ]
hhincome_net <- eusilc$eqIncome / 12
hhweight <- eusilc$db090
intervals <- c(
0, 150, 300, 500, 700, 900, 1100, 1300, 1500, 1700, 2000, 2300, 2600, 2900,
3200, 3600, 4000, 4500, 5000, 5500, 6000, 7500, Inf
)
c.hhincome <- cut(hhincome_net, breaks = intervals)
table(c.hhincome)
?wtd.quantile
library(laeken)
library(smicd)
library(Hmisc)
library(laeken)
################################################################################
#
# Direct estimation
#
################################################################################
set.seed(123)
#
# Load and prepare EU SILC data
#
data(eusilc)
eusilc <- eusilc[eusilc$eqIncome > 0, ]
hhincome_net <- eusilc$eqIncome / 12
hhweight <- eusilc$db090
intervals <- c(
0, 150, 300, 500, 700, 900, 1100, 1300, 1500, 1700, 2000, 2300, 2600, 2900,
3200, 3600, 4000, 4500, 5000, 5500, 6000, 7500, Inf
)
c.hhincome <- cut(hhincome_net, breaks = intervals)
table(c.hhincome)
Indicators <- kdeAlgo(
xclass = c.hhincome, classes = intervals,
bootstrap.se = FALSE, custom_indicator =
list(
quant05 = function(y, treshold, weights) {
wtd.quantile(y, probs = 0.05, weights)
},
quant95 = function(y, treshold, weights) {
wtd.quantile(y, probs = 0.95, weights)
}
),
weights = hhweight
)
print(Indicators)
install.packages("roxygen2")
install.packages("R.rsp")
library(spatstat)
?weighted.quantile
?wtd.quantile
install.packages("rmarkdown")
devtools::document()
install.packages("devtools")
devtools::document()
?wtd.quantile
devtools::document()
?wtd.quantile
install.packages("qpdf")
install.packages("Kernelheaping")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
help(smicd)
help(smicd)
detach("package:smicd", unload = TRUE)
remove.packages("smicd", lib="~/R/win-library/4.0")
help(smicd)
library(smicd)
help(smicd)
detach("package:smicd", unload = TRUE)
library(smicd)
?smicd
remove.packages("smicd", lib="~/R/win-library/4.0")
library(smicd)
?smicd
remove.packages("smicd", lib="~/R/win-library/4.0")
install.packages("~/GitHub/smicd_1.1.1.tar.gz", repos = NULL, type = "source")
library(smicd)
?smicd
install.packages("~/GitHub/smicd_1.1.1.tar.gz", repos = NULL, type = "source")
library(smicd)
install.packages("~/GitHub/smicd_1.1.1.tar.gz", repos = NULL, type = "source")
library(smicd)
help(smicd)
help("kdeAlgo")
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
help("kdeAlgoObject")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
help("plot.kdeAlgo")
styler:::style_active_file()
help("plot.sem")
styler:::style_active_file()
help("print.kdeAlgo")
styler:::style_active_file()
help("print.sem")
styler:::style_active_file()
library(smicd)
help("semLm")
styler:::style_active_file()
styler:::style_active_file()
help("semLme")
help("semObject")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
help("summary.sem")
help("summary.lm")
help("summary.sem")
help("print.sem")
styler:::style_active_file()
detach("package:smicd", unload = TRUE)
remove.packages("smicd", lib="~/R/win-library/4.0")
install.packages("~/GitHub/smicd_1.1.1.tar.gz", repos = NULL, type = "source")
library(smicd)
library(smicd)
help("summary.sem")
help("kdeAlgo")
x <- rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0, 500, 1000, 1500, 2000, 2500, 3000, 4000, 5000, 6000, 8000, 10000, 15000, Inf)
xclass <- cut(x, breaks = classes)
weights <- abs(rnorm(500, 0, 1))
oecd <- rep(seq(1, 6.9, 0.3), 25)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 5, samples = 10,
custom_indicator = list(quant5 = function(y, threshold) {
quantile(y, probs = 0.05)
}))
summary(Indicator)
print(Indicator)
plot(Indicator)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 5, samples = 10,
bootstrap.se = TRUE, b = 5, custom_indicator = list(
quant5 = function(y, threshold) {
quantile(y, probs = 0.05)
}))
print(Indicator)
plot(Indicator)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes,
weights = weights, oecd = oecd,  custom_indicator = list(
quant5 = function(y, threshold, weights) {
wtd.quantile(y, probs = 0.05, weights)
})
)
?wtd.quantile
wtd.quantile(x, probs=0.05, weights)
library(Hmisc)
wtd.quantile(x, probs=0.05, weights)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10,
weights = weights, oecd = oecd,  custom_indicator = list(
quant5 = function(y, threshold, weights) {
wtd.quantile(y, probs = 0.05, weights)
})
)
print(Indicator)
plot(Indicator)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10, bootstrap.se = TRUE, b = 5,
weights = weights, oecd = oecd,  custom_indicator = list(
quant5 = function(y, threshold, weights) {
wtd.quantile(y, probs = 0.05, weights)
})
)
print(Indicator)
plot(Indicator)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10,
weights = weights, custom_indicator = list(
quant5 = function(y, threshold, weights) {
wtd.quantile(y, probs = 0.05, weights)
})
)
print(Indicator)
plot(Indicator)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10, bootstrap.se = TRUE, b = 5,
weights = weights, custom_indicator = list(
quant5 = function(y, threshold, weights) {
wtd.quantile(y, probs = 0.05, weights)
})
)
print(Indicator)
plot(Indicator)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10,
oecd = oecd,  custom_indicator = list(
quant5 = function(y, threshold, weights) {
wtd.quantile(y, probs = 0.05, weights)
})
)
print(Indicator)
plot(Indicator)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10,
oecd = oecd,  custom_indicator = list(
quant5 = function(y, threshold) {
wtd.quantile(y, probs = 0.05)
})
)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10,
oecd = oecd,  custom_indicator = list(
quant5 = function(y, threshold) {
quantile(y, probs = 0.05)
})
)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10,
oecd = oecd,  custom_indicator = list(
quant5 = function(y, threshold, weights) {
quantile(y, probs = 0.05)
})
)
print(Indicator)
plot(Indicator)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10, bootstrap.se = TRUE, b = 5,
oecd = oecd,  custom_indicator = list(
quant5 = function(y, threshold, weights) {
quantile(y, probs = 0.05)
})
)
print(Indicator)
plot(Indicator)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10,
weights = weights, oecd = oecd, custom_indicator = list(
quant5 = function(y, threshold, weights) {
wtd.quantile(y, probs = 0.05, weights)
})
)
print(Indicator)
plot(Indicator)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes, burnin = 5, samples = 10, bootstrap.se = TRUE, b = 5,
weights = weights, oecd = oecd, custom_indicator = list(
quant5 = function(y, threshold, weights) {
wtd.quantile(y, probs = 0.05, weights)
})
)
print(Indicator)
plot(Indicator)
help("semLm")
data <- Exam
classes <- c(1, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.7, 8.5, Inf)
data$examsc.class <- cut(data$examsc, classes)
model <- semLm(
formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes
)
print(model)
summary(model)
plot(model)
model <- semLm(
formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 5, samples = 10, bootstrap.se = TRUE, b = 10
)
print(model)
summary(model)
plot(model)
model <- semLm(
formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 5, samples = 10, trafo = "log"
)
print(model)
summary(model)
plot(model)
model <- semLm(
formula = examsc.class ~ standLRT + schavg, data = data, trafo = "log",
classes = classes, burnin = 5, samples = 10, bootstrap.se = TRUE, b = 10
)
print(model)
summary(model)
plot(model)
model <- semLm(
formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes, burnin = 5, samples = 10, trafo = "bc"
)
print(model)
summary(model)
plot(model)
model <- semLm(
formula = examsc.class ~ standLRT + schavg, data = data, trafo = "bc",
classes = classes, burnin = 5, samples = 10, bootstrap.se = TRUE, b = 10
)
print(model)
summary(model)
plot(model)
help("semLme")
model <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes, burnin = 5, samples = 10
)
data <- Exam
classes <- c(1, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.7, 8.5, Inf)
data$examsc.class <- cut(data$examsc, classes)
model <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes, burnin = 5, samples = 10
)
print(model)
summary(model)
plot(model)
# with bootstrap
model <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes, burnin = 5, samples = 10,
bootstrap.se = TRUE, b = 10
)
print(model)
summary(model)
plot(model)
model <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes, burnin = 5, samples = 10, trafo = "log"
)
print(model)
summary(model)
plot(model)
model <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes, burnin = 5, samples = 10,
bootstrap.se = TRUE, b = 10, trafo = "log"
)
print(model)
summary(model)
plot(model)
model <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes, burnin = 5, samples = 10, trafo = "bc"
)
print(model)
summary(model)
plot(model)
model <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes, burnin = 5, samples = 10,
bootstrap.se = TRUE, b = 10, trafo = "bc"
)
print(model)
summary(model)
plot(model)
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT | school), data = data, classes = classes,
burnin = 5, samples = 10)
print(model)
summary(model)
plot(model)
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT | school), data = data, classes = classes,
burnin = 5, samples = 10, bootstrap.se = TRUE, b = 10)
print(model)
summary(model)
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT | school), data = data, classes = classes,
burnin = 5, samples = 10, bootstrap.se = TRUE, b = 50)
warnings()
print(model)
summary(model)
plot(model)
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT | school), data = data, classes = classes,
burnin = 5, samples = 10, trafo = "log")
print(model)
summary(model)
plot(model)
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT | school), data = data, classes = classes,
burnin = 5, samples = 10, bootstrap.se = TRUE, b = 10, trafo = "log")
print(model)
summary(model)
plot(model)
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT | school), data = data, classes = classes,
burnin = 5, samples = 10, trafo = "bc")
print(model)
summary(model)
plot(model)
model <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT | school), data = data, classes = classes,
burnin = 5, samples = 10, bootstrap.se = TRUE, b = 10, trafo = "bc")
print(model)
summary(model)
plot(model)
help("kdeAlgo")
x <- rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0, 500, 1000, 1500, 2000, 2500, 3000, 4000, 5000, 6000, 8000, 10000, 15000, Inf)
xclass <- cut(x, breaks = classes)
weights <- abs(rnorm(500, 0, 1))
oecd <- rep(seq(1, 6.9, 0.3), 25)
Indicator <- kdeAlgo(xclass = xclass, classes = classes)
plot(Indicator)
print(Indicator)
Indicator_custom <- kdeAlgo(
xclass = xclass, classes = classes,
custom_indicator = list(quant5 = function(y, threshold) {
quantile(y, probs = 0.05)
})
)
plot(Indicator)
print(Indicator)
print(Indicator_custom)
plot(Indicator_custom)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes,
weights = weights, oecd = oecd
)
Indicator_weights <- kdeAlgo(
xclass = xclass, classes = classes,
weights = weights, oecd = oecd
)
print(Indicator_weights)
plot(Indicator_weights)
help("semLm")
data <- Exam
classes <- c(1, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.7, 8.5, Inf)
data$examsc.class <- cut(data$examsc, classes)
model <- semLm(
formula = examsc.class ~ standLRT + schavg, data = data,
classes = classes
)
summary(model)
help("semLme")
data <- Exam
classes <- c(1, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.7, 8.5, Inf)
data$examsc.class <- cut(data$examsc, classes)
model1 <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes
)
summary(model1)
data <- Exam
classes <- c(1, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.7, 8.5, Inf)
data$examsc.class <- cut(data$examsc, classes)
# Run model with random intercept and default settings
model1 <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes
)
summary(model1)
model2 <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT | school), data = data, classes = classes)
model2 <- semLme(formula = examsc.class ~ standLRT + schavg +
(standLRT | school), data = data, classes = classes, trafo = "bc")
help("semLme")
detach("package:smicd", unload = TRUE)
remove.packages("smicd", lib="~/R/win-library/4.0")
library(smicd)
help("semLme")
data <- Exam
classes <- c(1, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.7, 8.5, Inf)
data$examsc.class <- cut(data$examsc, classes)
model1 <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes
)
summary(model1)
model1 <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes
)
summary(model1)
detach("package:smicd", unload = TRUE)
library(smicd)
data <- Exam
classes <- c(1, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.7, 8.5, Inf)
data$examsc.class <- cut(data$examsc, classes)
# Run model with random intercept and default settings
model1 <- semLme(
formula = examsc.class ~ standLRT + schavg + (1 | school),
data = data, classes = classes
)
summary(model1)
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.setenv('PATH' = paste0('C:\Program Files\qpdf-10.0.1\bin;', Sys.getenv('PATH')))
Sys.setenv('PATH' = paste0("C:\Program Files (x86)\qpdf-10.0.1\bin", Sys.getenv('PATH')))
Sys.setenv('PATH' = paste0("C:\\Program Files (x86)\\qpdf-10.0.1\\bin", Sys.getenv('PATH')))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
Sys.which(Sys.getenv("R_QPDF", "qpdf"))
ys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.52\\bin\\gswin64exe")
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.52\\bin\\gswin64exe")
?Sys.setenv
devtools::release()
