print(Rasch.par)
summary(Rasch.par)
Anderson <- LRtest(Rasch1, splitcr = "median")
plotPImap(Rasch1)
plotICC(Rasch1)
installed.packages("ineq")
install.packages("ineq")
install.packages("truncnorm")
install.packages("lme4")
install.packages("MuMI")
install.packages("formula.tools")
install.packages("mvtnorm")
install.packages("spatstat")
install.packages("laeken")
install.packages("weights")
install.packages("MuMIn")
library(smicd)
install.packages("roxygen2")
install.packages("R.rsp")
install.packages("rmarkdown")
install.packages("mlmRev")
install.packages("Kernelheaping")
install.packages("devtools")
Sys.setenv()
?Sys.setenv()
help("R_GSCMD")
Sys.getenv("R_GSCMD")
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.52\\bin\\gswin64c.exe")
Sys.getenv("R_GSCMD")
devtools::use_travis()
??use_travis
use_travis()
ci::use_travis()
usethis::use_travis()
remove.packages("smicd", lib="~/R/win-library/3.6")
library(smicd)
library(smicd)
library(smicd)
help("kdeAlgo")
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000, 15000,Inf)
xclass <- cut(x,breaks=classes)
weights <- abs(rnorm(500,0,1))
oecd <- rep(seq(1,6.9,0.3),25)
Indicator <- kdeAlgo(xclass = xclass, classes = classes)
Indicator
summary(Indicator)
prin(Indicator)
print(Indicator)
plot(Indicator)
classes
Indicator <- kdeAlgo(xclass = xclass, classes = ("classes"))
xclass
x <- Indicator
class(Indicator)
oecd <- NULL
is.null(indicator)
!is.null(indicator)
indicator = NULL
is.null(indicator)
for (i in 1:dim(x$Point_estimate.run)[1]) {
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = "Convergence")
abline(v = x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
i <- 1
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = "Convergence")
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = "Convergence")
abline(v = x$burnin)
x$Point_estimate.run[i,]
a <- 1:103
a
vec <- 1:100
vec
n <- length(vec)
n
every <- 1
x <- .colMeans(vec, every, n %/% every, na.rm)
?.colMeans
x <- .colMeans(vec, every, n %/% every)
x
r <- n %% every
r
(r)
x
c(x, mean.default(vec[(n - r + 1):n]))
(r)
x <- c(x, mean.default(vec[(n - r + 1):n]))
x
BinMean <- function (vec, every, na.rm = FALSE) {
n <- length(vec)
x <- .colMeans(vec, every, n %/% every, na.rm)
r <- n %% every
if (r) x <- c(x, mean.default(vec[(n - r + 1):n], na.rm = na.rm))
x
}
a <- 1:103
BinMean(a, every = 10)
BinMean(a, every = 1)
BinMean(a, every = 2)
a <- rnorm(100, 0, 1)
a
.rowMeans(a)
.rowMeans(x=a)
means <- NULL
for i in 1:length(a){
means <- c(means, mean(a[1:i]))
}
for (i in 1:length(a)){
means <- c(means, mean(a[1:i]))
}
means
a <- (1:10)
a
means <- NULL
for (i in 1:length(a)){
means <- c(means, mean(a[1:i]))
}
means
x$Point_estimate.run[i,]
x
x <- Indicator
means <- NULL
for (i in 1:length(a)){
means <- c(means, mean(x$Point_estimate.run[i,][1:i]))
}
means
x$Point_estimate.run[i,]
means <- NULL
for (i in 1:length(x$Point_estimate.run[i,])){
means <- c(means, mean(x$Point_estimate.run[i,][1:i]))
}
length(x$Point_estimate.run[i,])
x$Point_estimate.run[i,]
i
i <- 1
means <- NULL
for (j in 1:length(x$Point_estimate.run[i,])){
means <- c(means, mean(x$Point_estimate.run[i,][1:j]))
}
mean
means
plot(means)
x
x$Point_estimate
x$Point_estimate[i]
abline(h=x$Point_estimate[i])
x
x$samples
x$samples)
x$samples
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
plot(means)
abline(h=x$Point_estimate[i])
?plot
plot(means, xlim = c(0, (x$burnin + x$samples)))
means
plot(xlim = c(0, (x$burnin + x$samples)))
plot(0,xlim = c(0, (x$burnin + x$samples)))
plot(0,xlim = c(0, (x$burnin + x$samples)))
lines(means)
means
plot(means)
plot(means,xlim = c(0, (x$burnin + x$samples)))
plot(c(rep(means[1], x$burnin),means),xlim = c(0, (x$burnin + x$samples)))
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
plot(c(rep(means[1], x$burnin),means),xlim = c(0, (x$burnin + x$samples)),
col="white")
plot(c(rep(means[1], x$burnin),means),xlim = c(0, (x$burnin + x$samples)),
col="red")
plot(means,xlim = c(0, (x$burnin + x$samples)))
plot(c(rep(means[1], x$burnin),means),xlim = c(0, (x$burnin + x$samples)),
col="red")
means[1]-1
plot(c(rep(means[1]-1, x$burnin),means),xlim = c(0, (x$burnin + x$samples)),
col = ifelse(x = means[1]-1,'red','green'))
plot(c(rep(means[1]-1, x$burnin),means),xlim = c(0, (x$burnin + x$samples)),
col = ifelse(x == means[1]-1,'red','green'))
means[1]-1
bla = c(rep(means[1]-1, x$burnin),means)
bla = c(rep(means[1]-1, x$burnin),means)
plot(bla,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(bla==means[1]-1,'red','green'))
plot(bla,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(bla==means[1]-1,'white','black'))
means = c(rep(means[1]-1, x$burnin),means)
plot(means,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(bla==means[1]-1,'white','black'))
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
plot(means,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(bla==means[1]-1,'white','black'))
means = c(rep(means[1]-1, x$burnin),means)
plot(means,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(means==means[1]-1,'white','black'))
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-1, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-1,'white','black'))
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
if(is.null(indicator)){
for (i in 1:dim(x$Point_estimate.run)[1]) {
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = "Convergence")
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-1, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-1,'white','black'))
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
#   plot()
cat("Press [enter] to continue")
line <- readline()
}
}
indicator
i
i<-1
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = "Convergence")
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-1, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-1,'white','black'))
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
i<-2
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = "Convergence")
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-1, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-1,'white','black'))
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
means
point = c(rep(means[1]-1, x$burnin),means)
plot(point)
means[1]
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'))
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
par(mfrow=c(2,1))
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = "Convergence")
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'))
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
par(mfrow=c(2,1))
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = "Convergence")
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = name[i],)
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = c("Convergence", name[i]))
c("Convergence ", name[i])
"Convergence " + name[i]
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = paste0("Convergence " + name[i]))
par(mfrow=c(1,1))
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = paste0("Convergence " + name[i]))
par(mfrow=c(2,1))
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = paste0("Convergence " + name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = name[i],)
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
par(mfrow=c(2,1))
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = paste0("Convergence " + name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = name[i],)
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
dev.off()
par(mfrow=c(2,1))
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = paste0("Convergence " + name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = name[i],)
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = "bla")
title = paste0("Convergence " + name[i])
title
plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
main = paste0("Convergence ", name[i]))
plot(x$Point_estimate.run[i,], xlab = "Iteration step",
ylab = paste0(name[i], " - each iteration step"),
main = paste0("Convergence ", name[i]))
plot(x$Point_estimate.run[i,], xlab = "Iteration step",
ylab = "Point estimate",
main = paste0("Convergence ", name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
par(mfrow=c(2,1))
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step",
ylab = "Point estimate",
main = paste0("Convergence ", name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
for (i in 1:dim(x$Point_estimate.run)[1]) {
par(mfrow=c(2,1))
name <- rownames(x$Point_estimate.run)
plot(x$Point_estimate.run[i,], xlab = "Iteration step",
ylab = "Point estimate for each iteration",
main = paste0("Convergence ", name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[i,][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
#   plot()
cat("Press [enter] to continue")
line <- readline()
}
is.null(indicator)
indicator = c("mean", "gini")
!is.null(indicator)
length(indicator)
name <- indicator
plot(x$Point_estimate.run[indicator[i],], xlab = "Iteration step",
ylab = "Point estimate for each iteration",
main = paste0("Convergence ", name[i]))
abline(v = x$burnin)
i <- 1
plot(x$Point_estimate.run[indicator[i],], xlab = "Iteration step",
ylab = "Point estimate for each iteration",
main = paste0("Convergence ", name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[indicator[i],][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$Point_estimate[i])
abline(v=x$burnin)
indicator[i]
x$Point_estimate[indicator[i]]
for (i in 1:length(indicator)) {
name <- indicator
par(mfrow=c(2,1))
plot(x$Point_estimate.run[indicator[i],], xlab = "Iteration step",
ylab = "Point estimate for each iteration",
main = paste0("Convergence ", name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[indicator[i],][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$Point_estimate[indicator[i]])
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
indicator <- quant90
indicator <- "quant90"
for (i in 1:length(indicator)) {
name <- indicator
par(mfrow=c(2,1))
plot(x$Point_estimate.run[indicator[i],], xlab = "Iteration step",
ylab = "Point estimate for each iteration",
main = paste0("Convergence ", name[i]))
abline(v = x$burnin)
means <- NULL
for (j in 1:x$samples){
means <- c(means, mean(x$Point_estimate.run[indicator[i],][x$burnin:j]))
}
point = c(rep(means[1]-0.01, x$burnin),means)
plot(point,xlim = c(0, (x$burnin + x$samples)),
col = ifelse(point==means[1]-0.01,'white','black'),
xlab = "Iteration step", ylab = "Average up to iterstion step M")
abline(h=x$Point_estimate[indicator[i]])
abline(v=x$burnin)
cat("Press [enter] to continue")
line <- readline()
}
library(smicd)
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000, 15000,Inf)
xclass <- cut(x,breaks=classes)
weights <- abs(rnorm(500,0,1))
oecd <- rep(seq(1,6.9,0.3),25)
Indicator <- kdeAlgo(xclass = xclass, classes = ("classes"))
Indicator <- kdeAlgo(xclass = xclass, classes = classes)
plot(Indicator)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 300, samples = 1000)
plot(Indicator)
dev.off
dev.off()
library(smicd)
x=rlnorm(500, meanlog = 8, sdlog = 1)
classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000, 6000,8000,10000, 15000,Inf)
xclass <- cut(x,breaks=classes)
weights <- abs(rnorm(500,0,1))
oecd <- rep(seq(1,6.9,0.3),25)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 30, samples = 10)
plot(Indicator)
Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 400, samples = 2000)
plot(Indicator)
