#' @title Plot Diagnostics for a kdeAlgo Object
#'
#' @description Plots the esimtated density from the interval censored variable.
#' Also, convergence plots are given for all estimated statistical indicators.
#' The estimated indicator is plotted against the iteration step of the KDE-Algorithm.
#' A vertical line indicates the end of the burn-in period.
#' @param x an object of type "kdeAlgo", typical result of \code{\link{kdeAlgo}}
#' @param indicator a vector of indicator names specifying for which indicators
#' convergence plots are plotted, e.g. \code{c("mean", "gini")}
#' @param ... optional arguments passed to generic function.
#' @return Convergence and density plots.
#' @seealso \code{\link{kdeAlgoObject}}, \code{\link{kdeAlgo}}
#' @export
#' @importFrom graphics abline hist lines plot
#' @examples
#' x=rlnorm(500, meanlog = 8, sdlog = 1)
#' classes <- c(0,500,1000,1500,2000,2500,3000,4000,5000,
#' 6000,8000,10000,15000,Inf)
#' xclass <- cut(x,breaks=classes)
#' Indicator <- kdeAlgo(xclass = xclass, classes = classes, burnin = 40,
#' samples =200)
#' plot(Indicator)

plot.kdeAlgo <- function(x, indicator = NULL, ...) {

  if(is.null(indicator)){
#  for (i in 1:dim(x$Point_estimate.run)[1]) {
#    meanBur <- cumsum(x$Point_estimate.run[i,1:x$burnin]) /
#      seq_along(x$Point_estimate.run[i,1:x$burnin])
#    meanSam <- cumsum(x$Point_estimate.run[i,(x$burnin+1):(x$samples+x$burnin)]) /
#      seq_along(x$Point_estimate.run[i,1:x$samples])
#    convergence <- c(meanBur,meanSam)
#    name <- rownames(x$Point_estimate.run)
#    plot(convergence, xlab = "Iteration step", ylab = name[i],
#         main = "Convergence")
#    abline(v = x$burnin)
#    cat("Press [enter] to continue")
#    line <- readline()
#  }


 for (i in 1:dim(x$Point_estimate.run)[1]) {
   name <- rownames(x$Point_estimate.run)
   plot(x$Point_estimate.run[i,], xlab = "Iteration step", ylab = name[i],
        main = "Convergence")
   abline(v = x$burnin)
   cat("Press [enter] to continue")
   line <- readline()
 }

}


  if(!is.null(indicator)){
 #   for (i in 1:length(indicator)) {
#      meanBur <- cumsum(x$Point_estimate.run[indicator[i],1:x$burnin]) /
#        seq_along(x$Point_estimate.run[indicator[i],1:x$burnin])
#      meanSam <- cumsum(x$Point_estimate.run[indicator[i],(x$burnin+1):(x$samples+x$burnin)]) /
#        seq_along(x$Point_estimate.run[indicator[i],1:x$samples])
#      convergence <- c(meanBur,meanSam)
#      name <- indicator
#      plot(convergence, xlab = "Iteration step", ylab = name[i],
#           main = "Convergence")
#      abline(v = x$burnin)
#      cat("Press [enter] to continue")
#      line <- readline()
#    }

    for (i in 1:length(indicator)) {
      name <- indicator
      plot(x$Point_estimate.run[indicator[i],], xlab = "Iteration step", ylab = name[i],
           main = "Convergence")
      abline(v = x$burnin)
      cat("Press [enter] to continue")
      line <- readline()
    }

  }

  maxhist <- max(hist(x$xclass,breaks=x$classes, main = "Estimated Density",
                      xlab = "x", ylab = "f(x)",
                      xlim = c(x$classes[1],x$classes[length(x$classes)]/2))$density)
  maxden <- max(x$Mestimates)
  maxylim <- max(maxhist, maxden)

  hist(x$xclass,breaks=x$classes, main = "Estimated Density", xlab = "x",
       ylab = "f(x)",
       xlim = c(x$classes[1],x$classes[length(x$classes)]/2), ylim = c(0,maxylim))
  lines(x$Mestimates~x$gridx,col="purple",lwd=2)


}
